{
    "rules": {
      "users" : {
        "$user": {
          
          //Only user can write here
          "private": {
            ".write": "auth.id == $user",
            "contacts": {
              "$contact" : {
                  ".validate": "newData.isString()"
              }
            }
          },
          
          "groups": {
            //Only user can read all his groups
            ".read": "auth.id == $user",
            "$group" : {
              ".read": "auth != null && !data.exists()",
              ".write": "auth.id == $user || root.child('users/'+$user+'/private/contacts').hasChild(auth.id)",
              ".validate": "root.child('groups').hasChild($group)"
            }
          }
        }
      },
      
      "groups": {
          // a group conversation
          "$key": {
         
            // if the group hasn't been created yet, we allow read so there is a way 
            // to check this and create it; if it already exists, then authenticated 
            // user (specified by auth.id) must be in $key/users
            ".read": "auth != null && (!data.exists() || data.child('users').hasChild(auth.id))",
        
            // list of users authorized to participate in group
            "users": {
                // if the list doesn't exist, anybody can create it
                // if it already exists, only users already in the list may modify it
                ".write": "!data.exists() || data.hasChild(auth.id)",
                "$acc": {
                  // for now the value is just a 1, later it could be a read/write/super privilege
                  ".validate": "newData.isNumber()"
                }
            },
        
            // timestamps recording last time each user has read this group
            "last": {
                "$acc": {
                  // may only written by the authenticated user and if user is in $key/users
                  ".write": "$acc === auth.id && root.child('groups/'+$key+'/users').hasChild($acc)",
                  ".validate": "newData.isNumber()"
                }
            },
        
            "messages": {
                "$msg": {
                  // to write a message, it must have all three fields (usr, ts, and msg)
                  // and the person writing must be in $key/users
                  ".write": "root.child('groups/'+$key+'/users').hasChild(auth.id)",
                  ".validate":"newData.hasChildren(['timestamp', 'sender', 'text'])",
                  "sender": {
                  // may only create messages from myself
                    ".validate": "newData.val() === auth.id"
                  },
                  "text": {
                    ".validate": "newData.isString()"
                  },
                  "timestamp": {
                    ".validate": "newData.isNumber()"
                  }
                }
            }
          }
      },
      "test": {
        ".read": true,
        ".write": true
      }
    }
}